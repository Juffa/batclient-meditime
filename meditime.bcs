SCRIPT_NAME="medi";
SCRIPT_DESC ="show meditation time";
SCRIPT_OFF = false;
import System.Time;
import java.util.*; 
import java.lang.Math;

String kata="no";
String oldkata="no";
long lastKataTime=System.currentTimeMillis();
long startTime=System.currentTimeMillis();
long lastMedi=System.currentTimeMillis();
boolean setReport=false;
int total=0;

ArrayList no = new ArrayList();
ArrayList shodan = new ArrayList();
ArrayList nidan = new ArrayList();
ArrayList sandan = new ArrayList();
ArrayList unsu = new ArrayList();
ArrayList meikyo = new ArrayList();
ArrayList sochin = new ArrayList();
ArrayList wankan = new ArrayList();
ArrayList bassaiDai= new ArrayList();

ArrayList noCd = new ArrayList();
ArrayList shodanCd = new ArrayList();
ArrayList nidanCd = new ArrayList();
ArrayList sandanCd = new ArrayList();
ArrayList unsuCd = new ArrayList();
ArrayList meikyoCd = new ArrayList();
ArrayList sochinCd = new ArrayList();
ArrayList wankanCd = new ArrayList();
ArrayList bassaiDaiCd= new ArrayList();




void bootup(){
	triggers();
	
}

void run(){
	//functionality for when the command "$medi" is used
	
	if(argument !=null){
		switch(argument){
			case "pr":
				if(setReport==false){
					setReport=true;
					clientGUI.printText("general","Turning party report on.\n");
				}else{
					setReport=false;
					clientGUI.printText("general","Turning party report off.\n");
				}
			break;
			
			case "r":
				printStats();
			
			default:
				clientGUI.printText("general","Options: $medi r shows stats report, $medi pr turns party reporter on.\n");

		
		}
	}else{
		clientGUI.printText("general","Options: $medi r shows stats report, $medi pr turns party reporter on. May not work.\n");
		clientGUI.printText("general","Party report status is currently "+setReport+"\n");
	}

}

void triggers(){

    //katamessages
	triggerManager.newTrigger("kataHeianShodan",
	"^You perform the peaceful Heian Shodan kata.$",
	"$"+SCRIPT_NAME+".setKata Heian Shodan",
	false, true, false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);
	 
	triggerManager.newTrigger("kataHeianNidan",
	"^You perform the peaceful Heian Nidan kata.$",
	"$"+SCRIPT_NAME+".setKata Heian Nidan",
	false, true, false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);
	
	triggerManager.newTrigger("kataHeianSandan",
	"^You perform the peaceful Heian Sandan kata.$",
	"$"+SCRIPT_NAME+".setKata Heian Sandan",
	false, true, false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);

	triggerManager.newTrigger("kataAiryUnsu",
	"^You perform the airy Unsu kata.$",
	"$"+SCRIPT_NAME+".setKata Unsu",
	false, true, false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);

	triggerManager.newTrigger("kataFlowingMeikyo",
	"^You perform the flowing Meikyo kata.$",
	"$"+SCRIPT_NAME+".setKata Meikyo",
	false, true, false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);
	
	triggerManager.newTrigger("kataStrongSochin",
	"^You perform the strong Sochin kata.$",
	"$"+SCRIPT_NAME+".setKata Sochin",
	false, true, false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);
	
	triggerManager.newTrigger("kataFastWankan",
	"^You perform the fast Wankan kata.$",
	"$"+SCRIPT_NAME+".setKata Wankan",
	false, true, false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);
	
	triggerManager.newTrigger("kataAgressiveBassai-Dai",
	"^You perform the aggressive Bassai-Dai kata.$",
	"$"+SCRIPT_NAME+".setKata Bassai-Dai",
	false, true, false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);
	//katamessages end


	triggerManager.newTrigger("mediStart",
	"^You sit down and start meditating.$",
	"$"+SCRIPT_NAME+".medStart",
	false, true, false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);
	 
	triggerManager.newTrigger("mediEnd",
	"^Something disturbs you and you cannot concentrate any longer.$",
	"$"+SCRIPT_NAME+".medEnd",
	false,false,false,
	new Color[]{new Color(255, 255, 255)}, Font.PLAIN);
	
	triggerManager.newTrigger("canMeditateAgain",
    "^You feel in harmony with yourself, the universe and life in general.$",
    "$"+SCRIPT_NAME+".mediAgain",
    false, true, false,
    new Color[]{new Color(255, 255, 255)}, Font.PLAIN);	
	
	
	triggerManager.newTrigger("lastKata",
    "^You have a strong confidence in your skill.$",
    "$"+SCRIPT_NAME+".armKata",
    false, true, false,
    new Color[]{new Color(255, 255, 255)}, Font.PLAIN);	
	
}

void setKata(){
	kata=argument;
}

void armKata(){
	//Triggers when the message from kata-boosted skill-use comes and saves the time for the medStart function.
	lastKataTime=System.currentTimeMillis();
}

void medStart(){
	//Triggers when the meditation start message comes
	startTime=System.currentTimeMillis();
	if(System.currentTimeMillis()-lastKataTime>15000){
		//checks if the last kata-boosted skill-use was more than 15 seconds ago, which would mean the kata was used for some other skill and not for meditation.
		kata="no";
	}
}



void medEnd(){
	//Triggers when the meditation ends.
	double totaltime=(System.currentTimeMillis()-startTime)/1000.0;
	lastMedi=System.currentTimeMillis();
	
		switch(kata){
			
			case "no":
				no.add(totaltime);
				medEndPrinter(totaltime,no,0);
				break;
			
			case "Heian Shodan":
				shodan.add(totaltime);
				medEndPrinter(totaltime,shodan,0);
				
				break;
				
			case "Heian Nidan":
				nidan.add(totaltime);
				medEndPrinter(totaltime,nidan,0);
				break;				
				
			case "Heian Sandan":
				sandan.add(totaltime);
				medEndPrinter(totaltime,sandan,0);
				break;	
				
			case "Unsu":
				unsu.add(totaltime);
				medEndPrinter(totaltime,unsu,0);
				break;	

			case "Meikyo":
				meikyo.add(totaltime);
				medEndPrinter(totaltime,meikyo,0);
				break;	

			case "Sochin":
				sochin.add(totaltime);
				medEndPrinter(totaltime,sochin,0);
				break;	

			case "Wankan":
				wankan.add(totaltime);
				medEndPrinter(totaltime,wankan,0);
				break;	
				
			case "Bassai-Dai":
				bassaiDai.add(totaltime);
				medEndPrinter(totaltime,bassaiDai,0);
				break;
		}

	if(setReport){
		clientGUI.doCommand("@p report Meditation time "+totaltime+" seconds, used "+kata+" kata.");
	}
	oldkata=kata;
	kata="no";
}


void mediAgain(){
	//Triggers when you can meditate again.
	double totaltime=(System.currentTimeMillis()-lastMedi)/1000.0;
	
			switch(oldkata){
			
			case "no":
				noCd.add(totaltime);
				medEndPrinter(totaltime,noCd,1);
				break;
			
			case "Heian Shodan":
				shodanCd.add(totaltime);
				medEndPrinter(totaltime,shodanCd,1);
				break;
				
			case "Heian Nidan":
				nidanCd.add(totaltime);
				medEndPrinter(totaltime,nidanCd,1);
				break;				
				
			case "Heian Sandan":
				sandanCd.add(totaltime);
				medEndPrinter(totaltime,sandanCd,1);
				break;	
				
			case "Unsu":
				unsuCd.add(totaltime);
				medEndPrinter(totaltime,unsuCd,1);
				break;	

			case "Meikyo":
				meikyoCd.add(totaltime);
				medEndPrinter(totaltime,meikyoCd,1);
				break;	

			case "Sochin":
				sochinCd.add(totaltime);
				medEndPrinter(totaltime,sochinCd,1);
				break;	

			case "Wankan":
				wankanCd.add(totaltime);
				medEndPrinter(totaltime,wankanCd,1);
				break;	
			
			case "Bassai-Dai":
				bassaiDaiCd.add(totaltime);
				medEndPrinter(totaltime,bassaiDaiCd,1);
				break;

		}
	
	
	if(setReport){
		clientGUI.doCommand("@p report Can meditate again, time since last meditation: "+totaltime+" seconds.");
	}
	oldkata="no";
}

void medEndPrinter(double totaltime,ArrayList k,int end){
	//Prints the meditation times and cooldowns. 
	double average;
	for (int i=0; i<k.size();i++){
		average+=k.get(i);
	}
	if(end==0){
		clientGUI.printText("general","Meditime: "+Math.round(totaltime*10)/10.0+" seconds. Kata: "+kata+" kata. Average: "+Math.round(average/k.size()*10)/10.0+" seconds.\n","FFFFFF");
	}else{
		clientGUI.printText("general","Time since last meditation: "+Math.round(totaltime*10)/10.0+" seconds. Kata: "+oldkata+" kata. Average: "+Math.round(average/k.size()*10)/10.0+"\n","FFFFFF");
	}
}

void printStats(){
	//Prints the stats with the '$medi r' -command
	clientGUI.printText("general","Meditation stats:\n","FFFFFF");
	reportPrinter("No kata",no,noCd);
	reportPrinter("Heian Shodan kata",shodan,shodanCd);
	reportPrinter("Heian Nidan kata",nidan,nidanCd);
	reportPrinter("Heian Sandan kata",sandan,sandanCd);
	reportPrinter("Unsu kata",unsu,unsuCd);
	reportPrinter("Meikyo kata",meikyo,meikyoCd);
	reportPrinter("Sochin kata",sochin,sochinCd);
	reportPrinter("Wankan kata",wankan,wankanCd);
	reportPrinter("Bassai-Dai kata",bassaiDai,bassaiDaiCd);
	
	if(total>0){
		clientGUI.printText("general","Total meditations: "+total+".\n","FFFFFF");
		total=0;
	}
}

void reportPrinter(String kataname,ArrayList k,ArrayList kCd){
	//Prints the stats
	if(k.size()>0){
		total+=k.size();
		double average;
		double averageCd;
		for (int i=0; i<k.size();i++){
			average+=k.get(i);
		}
		for (int i=0; i<kCd.size();i++){
			averageCd+=kCd.get(i);
		}
		average=average/k.size();
		averageCd=averageCd/kCd.size();
		clientGUI.printText("general",""+kataname+": "+k.size()+" meditations, average length "+Math.round(average*10)/10.0+" seconds, average cooldown "+Math.round(averageCd*10)/10.0+" seconds.\n","FFFFFF");
	
	}
}




